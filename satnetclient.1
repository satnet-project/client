.\" Man page generated from reStructuredText.
.
.TH "SATNETCLIENT" "1" "November 12, 2015" "0.1" "SATNet Client"
.SH NAME
satnetclient \- SATNet Client Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
Contents:
.sp
This is the documentation of the client of the SATNet network.
.sp
Here are summarized the different operating modes of the client.
.sp
The latest version of this development can be found at:
<\fI\%https://github.com/satnet\-project/generic\-client\fP>
.SH INSTALLATION
.SS Installation of required dependencies.
.sp
Steps to install the generic client for the SATNet network:
.nf
1. To install the dependencies run, from the Scripts folder:
\fIbash ./setup.sh\fP
.fi
.sp
.sp
During installation this script asks for sudo permissions.
.SS Enabling dependencies
.nf
To run the the client you have to activate the virtual enviroment created by the installation script.
.fi
.sp
.nf
To do this we must execute from the root directory.
source .venv/bin/activate\(ga
.fi
.sp
.SH HOW TO USE THE CLIENT'S APPLICATION.
.nf
The program setup process can be done in three different ways.
1. Passing settings through the command line.
2. Entering the values directly in the application interface.
3. Loading values from an external configuration file.
.fi
.sp
.SS Through command line.
.nf
The configuration settings are established using these arguments.
All of these arguments must be set, otherwise the program could raise an error.
.fi
.sp
.nf
* [\-u <username>] # Set SATNET username to login
* [\-p <password>] # Set SATNET user password to login
* [\-t <slot_ID>] # Set the slot id corresponding to the pass.
* [\-c <connection>] # Set the type of interface with the GS.
* [\-s <serialport>] # Set serial port.
* [\-b <baudrate>] # Set serial port baudrate
* [\-i <ip>] # Set ip direction.
* [\-u <udpport>] # Set udp port.
.fi
.sp
.SS Examples.
.nf
To clarify the previous point we will show several examples.
.fi
.sp
.nf
Example for serial config:
* Python client_amp.py \-g \-u crespo \-p cre.spo \-t 2
.in +2
\-c serial \-s /dev/ttyS1 \-b 115200
.in -2
Example for udp config:
* python client_amp.py \-g \-u crespo \-p cre.spo \-t 2
.in +2
\-c udp \-i 127.0.0.1 \-u 5001
.in -2
.fi
.sp
.SS Directly user interface
.nf
In the menu on the left of the screen, you can enter all values needed to establish the connection.
.fi
.sp
.SS Using an external file.
.nf
As previously mentioned configuration values can be stored in a configuration file called config.ini. By selecting the appropriate option in the program will be loaded at the beginning of each ruqn.
.fi
.sp
.nf
[User]
username: crespo
password: cre.spo
slot_id: 2
connection: udp
[Serial]
serialport: /dev/ttyUSB0
baudrate: 9600
[UDP]
ip: 127.0.0.1
udpport: 5005
.fi
.sp
.nf
This file should be at the root filesystem of the client.
.fi
.sp
.SH WORKING PROCEDURE
.sp
Startup process of the graphical interface.
.nf
| +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
| |    Opens client_amp.py    |
| +\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-+
|               I
|               I
| +\-\-\-\-\-\-\-\-\-\-\-\-\-V\-\-\-\-\-\-\-\-\-\-\-\-\-+ \-\- help argument  +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
| |      Checks arguments     | \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-> | Launch man page |
| +\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-+                   +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
|               I
|               I
|               I \- No arguments
|               I
|               I
| +\-\-\-\-\-\-\-\-\-\-\-\-\-V\-\-\-\-\-\-\-\-\-\-\-\-\-+
| |    Redirects sys.stdout   |
| +\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-+
|               I
|               I
| +\-\-\-\-\-\-\-\-\-\-\-\-\-V\-\-\-\-\-\-\-\-\-\-\-\-\-+
| |  Launchs the application  |
| +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
|               I
|               I
| +\-\-\-\-\-\-\-\-\-\-\-\-\-V\-\-\-\-\-\-\-\-\-\-\-\-\-+
| | Creates the main window   |
| +\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-+
|               I
|               I
| +\-\-\-\-\-\-\-\-\-\-\-\-\-V\-\-\-\-\-\-\-\-\-\-\-\-\-+
| |   Shows the main window   |
| +\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-+
|               I
|               I
| +\-\-\-\-\-\-\-\-\-\-\-\-\-V\-\-\-\-\-\-\-\-\-\-\-\-\-+
| | Install the corresponding |
| |   reactor, pyqt4reactor   |
| +\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-+
|               I
|               I
| +\-\-\-\-\-\-\-\-\-\-\-\-\-V\-\-\-\-\-\-\-\-\-\-\-\-\-+
| |     Starts the reactor    |
V +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.fi
.sp
.sp
Creates the main window
.sp
Shows the main window
.sp
Installs the corresponding reactor called pyqt4reactor
.sp
Starts the reactor.
.SH CLIENT FILE STRUCTURE
.sp
Client classes are as follows. Each class is detailed with its corresponding methods.
.TS
center;
|l|l|l|.
_
T{
Module
T}	T{
Class
T}	T{
Methods
T}
_
T{
client_amp.py
T}	T{
ClientProtocol
T}	T{
__init__
T}
_
T{
T}	T{
T}	T{
connectionMade
T}
_
T{
T}	T{
T}	T{
connectionLost
T}
_
T{
T}	T{
T}	T{
user_login
T}
_
T{
T}	T{
T}	T{
vNotifyMsg
T}
_
T{
T}	T{
T}	T{
_processframe
T}
_
T{
T}	T{
T}	T{
processframe
T}
_
T{
T}	T{
T}	T{
vNotifyEvent
T}
_
.TE
.sp
The ClientProtocol class is responsible for creating the connection protocol client.
.INDENT 0.0
.TP
.B __init__(self, CONNECTION_INFO, gsi)
ClientProtocol class initialization through the CONNECTION_INFO variable and the gsi object.
.UNINDENT
.INDENT 0.0
.TP
.B connectionMade(self)
Method belonging to the protocol responsible for starting the user\(aqs connection.
.UNINDENT
.INDENT 0.0
.TP
.B connectionLost(self)
When the connection is lost this method is executed.
.UNINDENT
.INDENT 0.0
.TP
.B user_login(self)
This method is responsible for making the AMP calls that initiate the connection.
.UNINDENT
.INDENT 0.0
.TP
.B vNotifyMsg(self, sMsg)
AMP call responsible for notifying the user of reception of a message.
.UNINDENT
.INDENT 0.0
.TP
.B _processframe(self, frame)
Method associated to frame processing.
.UNINDENT
.INDENT 0.0
.TP
.B processFrame(self, frame)
Responsible method of get the frames through the serial port, or through an UPD/TCP connection, and send them using an AMP call.
.UNINDENT
.INDENT 0.0
.TP
.B vNotifyEvent(self, iEvent, sDetails)
AMP call responsible for notifying the user of any event related to the remote client or the connection slots.
.UNINDENT
.TS
center;
|l|l|l|.
_
T{
Module
T}	T{
Class
T}	T{
Methods
T}
_
T{
client_amp.py
T}	T{
ClientReconnectedFactory
T}	T{
__init__
T}
_
T{
T}	T{
T}	T{
startedConnecting
T}
_
T{
T}	T{
T}	T{
buildProtocol
T}
_
T{
T}	T{
T}	T{
clientConnectionLost
T}
_
T{
T}	T{
T}	T{
clientConnectionFailed
T}
_
.TE
.sp
The ClientReconnectedFactory class is responsible for managing user logon when this is lost for any reason.
.INDENT 0.0
.TP
.B __init__(
.UNINDENT
.INDENT 0.0
.TP
.B startedConnecting(self, connector)
Method called when a connection has been started.
.UNINDENT
.INDENT 0.0
.TP
.B buildProtocol(self, addr)
Create an instance of a subclass of Protocol.
.UNINDENT
.INDENT 0.0
.TP
.B clientConnectionLost(self, connector, reason)
Called when a established connection is lost.
.UNINDENT
.INDENT 0.0
.TP
.B clientConnectionFailed(self, connector, reason)
Called when a connection has failed to connect.
.UNINDENT
.TS
center;
|l|l|l|.
_
T{
Module
T}	T{
Class
T}	T{
Methods
T}
_
T{
client_amp.py
T}	T{
CtxFactory
T}	T{
getContext
T}
_
.TE
.sp
The CtxFactory class handles the defining method to be used in SSL connection.
.INDENT 0.0
.TP
.B getContext(self)
Setting the connection method.
.UNINDENT
.TS
center;
|l|l|l|.
_
T{
Module
T}	T{
Class
T}	T{
Methods
T}
_
T{
client_amp.py
T}	T{
Client
T}	T{
__init__
T}
_
T{
T}	T{
T}	T{
createConnection
T}
_
.TE
.sp
The "Client" class starts the connection using Twisted. For this purpose uses the ClientReconnectedFactory class and the ClientProtocol class.
.INDENT 0.0
.TP
.B __init__(
.UNINDENT
.INDENT 0.0
.TP
.B createConnection(self)
Create a new interface.
.UNINDENT
.TS
center;
|l|l|l|.
_
T{
Module
T}	T{
Class
T}	T{
Methods
T}
_
T{
client_amp.py
T}	T{
SATNetGUI
T}	T{
__init__
T}
_
T{
T}	T{
T}	T{
runKISSThread
T}
_
T{
T}	T{
T}	T{
runUDPThread
T}
_
T{
T}	T{
T}	T{
runTCPThread
T}
_
T{
T}	T{
T}	T{
stopKISSThread
T}
_
T{
T}	T{
T}	T{
stopUDPThread
T}
_
T{
T}	T{
T}	T{
stopTCPThread
T}
_
T{
T}	T{
T}	T{
sendData
T}
_
T{
T}	T{
T}	T{
NewConnection
T}
_
T{
T}	T{
T}	T{
initUI
T}
_
T{
T}	T{
T}	T{
initFields
T}
_
T{
T}	T{
T}	T{
initLogo
T}
_
T{
T}	T{
T}	T{
initData
T}
_
T{
T}	T{
T}	T{
initConsole
T}
_
T{
T}	T{
T}	T{
CloseConnection
T}
_
T{
T}	T{
T}	T{
LoadSettings
T}
_
T{
T}	T{
T}	T{
LoadParameters
T}
_
T{
T}	T{
T}	T{
SetConfiguration
T}
_
T{
T}	T{
T}	T{
CheckConnection
T}
_
T{
T}	T{
T}	T{
usage
T}
_
T{
T}	T{
T}	T{
center
T}
_
T{
T}	T{
T}	T{
append_text
T}
_
T{
T}	T{
T}	T{
closeEvent
T}
_
.TE
.sp
SATNetGUI class contains the methods necessary for the creation of the main user interface.
.INDENT 0.0
.TP
.B __init__(self, parent = None)
This initial method starts the user interface and the signals and queues required for QThreads.
.UNINDENT
.INDENT 0.0
.TP
.B runKISSThread(self)
Create an object of class OperativeKISSThread and starts the QThread calling the start method.
.UNINDENT
.INDENT 0.0
.TP
.B runUDPThread(self)
Create an object of class OperativeUDPThread and starts the QThread calling the start method.
.UNINDENT
.INDENT 0.0
.TP
.B runTCPThread(self)
Create an object of class OperativeTCPThread and starts the QThread calling the start method.
.UNINDENT
.INDENT 0.0
.TP
.B stopKISSThread(self)
Stops the QThread that handles serial communication calling the stop method.
.UNINDENT
.INDENT 0.0
.TP
.B stopUDPThread(self)
Stops the QThread that handles UDP communication calling the stop method.
.UNINDENT
.INDENT 0.0
.TP
.B stopTCPThread(self)
Stops the QThread that handles TCP communication calling the stop method.
.UNINDENT
.INDENT 0.0
.TP
.B sendData(self, result)
Invokes the _manageframe method of protocol GroundStationInterface.
.UNINDENT
.INDENT 0.0
.TP
.B NewConnection(self)
Create a new connection by loading the connection parameters from the interface window.
.UNINDENT
.INDENT 0.0
.TP
.B initUI(self)
UI starts by passing the basic values such as size and name.
.UNINDENT
.INDENT 0.0
.TP
.B initButtons(self)
Starts the control buttons panel of user interface.
.UNINDENT
.INDENT 0.0
.TP
.B initFields(self)
Starts the data entry field.
.UNINDENT
.INDENT 0.0
.TP
.B initLogo(self)
Method which defines the logo of the main window.
.UNINDENT
.INDENT 0.0
.TP
.B initData(self)
Reads the program settings from .settings file and edit them accordingly.
.UNINDENT
.INDENT 0.0
.TP
.B initConsole(self)
Starts the console where the status messages will be shown.
.UNINDENT
.INDENT 0.0
.TP
.B CloseConnection(self)
Ends the current connection without finishing the program.
.UNINDENT
.INDENT 0.0
.TP
.B LoadSettings(self)
.nf
Loads configuration settings from .settings file and get back them to user.
Duplicated function. Must be merged with initData method.
.fi
.sp
.UNINDENT
.INDENT 0.0
.TP
.B LoadParameters(self)
It loads user parameters, as username and password, from config.ini file.
.UNINDENT
.INDENT 0.0
.TP
.B SetConfiguration(self)
Method responsible to create advanced user settings window.
.UNINDENT
.INDENT 0.0
.TP
.B CheckConnection(self)
Method which changes the UI according to the connection selected.
.UNINDENT
.INDENT 0.0
.TP
.B usage(self)
Method which show on screen a tiny text help.
.UNINDENT
.INDENT 0.0
.TP
.B center(self)
Method which centers the main window on screen.
.UNINDENT
.INDENT 0.0
.TP
.B append_text(self, text)
Method responsible to add the messages to the user console.
.UNINDENT
.INDENT 0.0
.TP
.B closeEvent(self, text)
Method responsible of, when the program is closed, the communication ends.
.UNINDENT
.TS
center;
|l|l|l|.
_
T{
Module
T}	T{
Class
T}	T{
Methods
T}
_
T{
client_amp.py
T}	T{
DateDialog
T}	T{
__init__
T}
_
T{
T}	T{
T}	T{
getConfiguration
T}
_
T{
T}	T{
T}	T{
buildWindow
T}
_
.TE
.sp
The DateDialog class contains the methods needed to display the user configuration advanced settings.
.INDENT 0.0
.TP
.B __init__(self)
Method needed to start the window.
.UNINDENT
.INDENT 0.0
.TP
.B getConfiguration(self)
Method responsible of reading the settings available on screen.
.UNINDENT
.INDENT 0.0
.TP
.B buildWindow(self)
Static method in charge of creating the configuration window through a call from the SATNetGUI class. This method will return the configuration values.
.UNINDENT
.TS
center;
|l|l|l|.
_
T{
Module
T}	T{
Class
T}	T{
Methods
T}
_
T{
client_amp.py
T}	T{
WriteStream
T}	T{
__init__
T}
_
T{
T}	T{
T}	T{
write
T}
_
T{
T}	T{
T}	T{
flush
T}
_
.TE
.sp
The WriteStream class create the queue needs for the console text.
.INDENT 0.0
.TP
.B __init__(self)
Class initialization. Create the queue required for this class.
.UNINDENT
.INDENT 0.0
.TP
.B write(self)
Collect the text and adds it to the queue created.
.UNINDENT
.INDENT 0.0
.TP
.B flush(self)
Not docummented.
.UNINDENT
.TS
center;
|l|l|l|.
_
T{
Module
T}	T{
Class
T}	T{
Methods
T}
_
T{
client_amp.py
T}	T{
MyReceiver
T}	T{
__init__
T}
_
T{
T}	T{
T}	T{
run
T}
_
.TE
.sp
An object class inherited from the class QThread. Used to manage the thread that handles text console.
.INDENT 0.0
.TP
.B __init__(self)
Class initialization.
.UNINDENT
.INDENT 0.0
.TP
.B run(self)
Method main thread. Collect the text from the queue and output as a signal.
.UNINDENT
.TS
center;
|l|l|l|.
_
T{
Module
T}	T{
Class
T}	T{
Methods
T}
_
T{
client_amp.py
T}	T{
ResultObj
T}	T{
__init__
T}
_
.TE
.sp
Class responsible for transforming the value received in an object of the QThread module.
.INDENT 0.0
.TP
.B __init__(self)
Class initialization.
.UNINDENT
.TS
center;
|l|l|l|.
_
T{
Module
T}	T{
Class
T}	T{
Methods
T}
_
T{
gs_interface.py
T}	T{
GroundStationInterface
T}	T{
__init__
T}
_
T{
T}	T{
T}	T{
_manageFrame
T}
_
T{
T}	T{
T}	T{
_updateLocalFile
T}
_
T{
T}	T{
T}	T{
connectProtocol
T}
_
T{
T}	T{
T}	T{
disconnectedProtocol
T}
_
.TE
.sp
Class responsible for initiating the basic methods of the client connection with the tracking station.
.INDENT 0.0
.TP
.B __init__(self, CONNECTION_INFO, GS, AMP)
Class initialization. Collect settings of the connection.
.UNINDENT
.INDENT 0.0
.TP
.B _manageFrame(self, result)
Checks if the AMP connection is available. If it is not available this method saves the messages in a local file.
.UNINDENT
.INDENT 0.0
.TP
.B _updateLocalFile(self, frame)
Method responsible, in the absence of a connection, save the received messages.
.UNINDENT
.INDENT 0.0
.TP
.B connectedProtocol(self, AMP)
This method it is call when the protocol gets connected.
.UNINDENT
.INDENT 0.0
.TP
.B disconnectedProtocol(self)
This method it is call when the protocol gets disconnected.
.UNINDENT
.TS
center;
|l|l|l|.
_
T{
Module
T}	T{
Class
T}	T{
Methods
T}
_
T{
gs_interface.py
T}	T{
UDPThread
T}	T{
__init__
T}
_
T{
T}	T{
T}	T{
run
T}
_
T{
T}	T{
T}	T{
stop
T}
_
T{
T}	T{
T}	T{
doWork
T}
_
T{
T}	T{
T}	T{
cleanUp
T}
_
.TE
.sp
An object class inherited from the class QThread. Used to manage the thread that handles the UDP protocol.
.INDENT 0.0
.TP
.B __init__(self, parent = None)
It opens the UPD socket.
.UNINDENT
.INDENT 0.0
.TP
.B run(self)
It starts the QThread execution.
.UNINDENT
.INDENT 0.0
.TP
.B stop(self)
This method stops the thread execution.
.UNINDENT
.INDENT 0.0
.TP
.B doWork(self)
Not docummented.
.UNINDENT
.INDENT 0.0
.TP
.B cleanUp(self)
Not docummented.
.UNINDENT
.TS
center;
|l|l|l|.
_
T{
Module
T}	T{
Class
T}	T{
Methods
T}
_
T{
gs_interface.py
T}	T{
TCPThread
T}	T{
__init__
T}
_
T{
T}	T{
T}	T{
run
T}
_
T{
T}	T{
T}	T{
stop
T}
_
T{
T}	T{
T}	T{
doWork
T}
_
T{
T}	T{
T}	T{
cleanUp
T}
_
.TE
.sp
An object class inherited from the class QThread. Used to manage the thread that handles the TCP protocol.
.INDENT 0.0
.TP
.B __init__(self, parent = None)
It opens the TCP socket.
.UNINDENT
.INDENT 0.0
.TP
.B run(self)
It starts the QThread execution.
.UNINDENT
.INDENT 0.0
.TP
.B stop(self)
This method stops the thread execution.
.UNINDENT
.INDENT 0.0
.TP
.B doWork(self)
Not docummented.
.UNINDENT
.INDENT 0.0
.TP
.B cleanUp(self)
Not docummented.
.UNINDENT
.TS
center;
|l|l|l|.
_
T{
Module
T}	T{
Class
T}	T{
Methods
T}
_
T{
gs_interface.py
T}	T{
KISSThread
T}	T{
__init__
T}
_
T{
T}	T{
T}	T{
run
T}
_
T{
T}	T{
T}	T{
stop
T}
_
T{
T}	T{
T}	T{
doWork
T}
_
T{
T}	T{
T}	T{
cleanUp
T}
_
.TE
.sp
An object class inherited from the class QThread. Used to manage the thread that handles the KISS protocol.
.INDENT 0.0
.TP
.B __init__(self, parent = None)
It creates the KISS protocol.
.UNINDENT
.INDENT 0.0
.TP
.B run(self)
It starts the QThread execution.
.UNINDENT
.INDENT 0.0
.TP
.B stop(self)
This method stops the thread execution.
.UNINDENT
.INDENT 0.0
.TP
.B doWork(self)
Not docummented.
.UNINDENT
.INDENT 0.0
.TP
.B cleanUp(self)
Not docummented.
.UNINDENT
.TS
center;
|l|l|l|.
_
T{
Module
T}	T{
Class
T}	T{
Methods
T}
_
T{
gs_interface.py
T}	T{
OperativeUDPThread
T}	T{
__init__
T}
_
T{
T}	T{
T}	T{
doWork
T}
_
T{
T}	T{
T}	T{
catchValue
T}
_
.TE
.sp
An object class inherited from the class OperativeUDPThread. Used to manage the UDP reception.
.INDENT 0.0
.TP
.B __init__(self, queue, callback, UDPSignal, parent = None)
Connects the thread to the callback function.
.UNINDENT
.INDENT 0.0
.TP
.B doWork(self, UDPSocket)
It collects the frames from the UDP connection.
.UNINDENT
.INDENT 0.0
.TP
.B catchValue(self, frame, address)
Method that collects the received frame and returns it as a signal.
.UNINDENT
.TS
center;
|l|l|l|.
_
T{
Module
T}	T{
Class
T}	T{
Methods
T}
_
T{
gs_interface.py
T}	T{
OperativeTCPThread
T}	T{
__init__
T}
_
T{
T}	T{
T}	T{
doWork
T}
_
T{
T}	T{
T}	T{
catchValue
T}
_
.TE
.sp
An object class inherited from the class OperativeTCPThread. Used to manage the TCP reception.
.INDENT 0.0
.TP
.B __init__(self, queue, callback, TCPSignal, parent = None)
Connects the thread to the callback function.
.UNINDENT
.INDENT 0.0
.TP
.B doWork(self, TCPSocket)
It collects the frames from the TCP connection.
.UNINDENT
.INDENT 0.0
.TP
.B catchValue(self, frame, address)
Method that collects the received frame and returns it as a signal.
.UNINDENT
.TS
center;
|l|l|l|.
_
T{
Module
T}	T{
Class
T}	T{
Methods
T}
_
T{
gs_interface.py
T}	T{
OperativeKISSThread
T}	T{
__init__
T}
_
T{
T}	T{
T}	T{
doWork
T}
_
T{
T}	T{
T}	T{
catchValue
T}
_
.TE
.sp
An object class inherited from the class OperativeKISSThread. Used to manage the KISS reception.
.INDENT 0.0
.TP
.B __init__(self, queue, callback, serialSignal, parent = None)
Connects the thread to the callback function.
.UNINDENT
.INDENT 0.0
.TP
.B doWork(self, kissTNC)
It collects the frames from the serial connection through the KISS protocol.
.UNINDENT
.INDENT 0.0
.TP
.B catchValue(self, frame)
Method that collects the received frame and returns it as a signal.
.UNINDENT
.SH PROTOCOL FILE STRUCTURE
.sp
Customer classes are as follows. Each class is detailed with its corresponding methods.
.TS
center;
|l|l|l|.
_
T{
Module
T}	T{
Class
T}	T{
Methods
T}
_
T{
client_amp.py
T}	T{
ClientProtocol
T}	T{
__init__
T}
_
T{
T}	T{
T}	T{
connectionMade
T}
_
T{
T}	T{
T}	T{
connectionLost
T}
_
T{
T}	T{
T}	T{
user_login
T}
_
T{
T}	T{
T}	T{
vNotifyMsg
T}
_
T{
T}	T{
T}	T{
_processframe
T}
_
T{
T}	T{
T}	T{
processframe
T}
_
T{
T}	T{
T}	T{
vNotifyEvent
T}
_
.TE
.sp
El módulo server_amp.py es el encargado de iniciar el servidor de Twisted.
.sp
El fichero se puede iniciar en modo debug, en este modo se muestran por pantalla mensajes de aviso cada vez que se crea un deferred o se invoca. También dispone de un modo de ayuda que muestra un pequeño mensaje de ayuda.
.sp
La clase SATNETServer, perteneciente al módulo server_amp.py contiene los metodos AMP necesarios.
.INDENT 0.0
.TP
.B dataReceived(self, data)
ClientProtocol class initialization through the CONNECTION_INFO variable and the gsi object.
.UNINDENT
.INDENT 0.0
.TP
.B iStartRemote(self, iSLotId)
Method belonging to the protocol responsible for starting the user\(aqs connection.
.UNINDENT
.INDENT 0.0
.TP
.B vEndRemote(self)
Actualmente no está implementado.
.UNINDENT
.INDENT 0.0
.TP
.B vSendMsg(self, sMsg, iTimestamp)
This method is responsible for making the AMP calls that initiate the connection.
.UNINDENT
.SH AUTHOR
Ricardo Tubio-Pardavila - Samuel Gongora-Garcia
.SH COPYRIGHT
2015, Ricardo Tubio-Pardavila - Samuel Gongora-Garcia
.\" Generated by docutils manpage writer.
.
